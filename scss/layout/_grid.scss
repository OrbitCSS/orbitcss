$col-padding: calculateRem(10) !default;
$col-margin-top: calculateRem(8) !default;
$col-margin-bottom: calculateRem(8) !default;
$max-cols: 12 !default;
$col-percentage: 100 / $max-cols;

$grid-sizes: 'one-quarter' 25%, 'half' 50%, 'three-quarters' 75%, 'one-third' 33.333333%, 'two-thirds' 66.666666%, 'full' 100%, 'one-fifth' 20%, 'two-fifths' 40%, 'three-fifths' 60%, 'four-fifths' 80%;

@function calcColWidth($size) {
  @return $col-percentage * $size * 1%;
}

.grid {
  display: flex;
  flex-wrap: wrap;

  &.has-centered {
    justify-content: center;

    &.is-vertical {
      align-items: center;
    }
  }

  &.has-end {
    justify-content: flex-end;
  }

  &.is-reversed {
    flex-direction: row-reverse;
  }

  &.has-spacing {
    justify-content: space-between;
  }

  &.has-row-margin {
    .column {
      margin-bottom: $col-margin-bottom;
      margin-top: $col-margin-top;
    }
  }

  &.is-vertical {
    flex-direction: column;
  }

  .column {
    flex-basis: 0;
    flex-grow: 1;
    flex-shrink: 1;
    padding: $col-padding;

    @include small {
      flex: none;
      width: 100%;
    }

    &.is-end {
      margin-left: auto;
    }

    &.is-center {
      margin: 0 auto;
    }
  }

  &.has-no-col-padding > .column {
    padding: 0;
  }

  @each $size in $grid-sizes {
    .column.is-#{nth($size, 1)} {
      @include medium {
        flex: none;
        width: nth($size, 2);
      }
    }

    @if(nth($size, 1) != 'full') {
      .column.is-offset-#{nth($size, 1)} {
        @include medium {
          margin-left: nth($size, 2);
        }
      }
    }
  }

  @each $size in $grid-sizes {
    @include small {
      .column.is-mobile-#{nth($size, 1)} {
        flex: none;
        width: nth($size, 2);
      }
    }

    @include large {
      .column.is-desktop-#{nth($size, 1)} {
        flex: none;
        width: nth($size, 2);
      }
    }
  }

  @each $size in $grid-sizes {
    @if(nth($size, 1) != 'full') {
      @include small {
        .column.is-mobile-offset-#{nth($size, 1)} {
          margin-left: nth($size, 2);
        }
      }

      @include large {
        .column.is-desktop-offset-#{nth($size, 1)} {
          margin-left: nth($size, 2);
        }
      }
    }
  }

  .column.is-shrink {
    flex: none;
  }

  @include small {
    .column.is-mobile-shrink {
      flex: none;
      width: auto;
    }
  }

  @include large {
    .column.is-desktop-shrink {
      flex: none;
      width: auto;
    }
  }

  @for $i from 1 through $max-cols {
    .column.is-#{$i} {
      @include medium {
        flex: none;
        width: calcColWidth($i);
      }
    }

    @include small {
      .column.is-mobile-#{$i} {
        flex: none;
        width: calcColWidth($i);
      }
    }

    @if($i != $max-cols) {
      .column.is-offset-#{$i} {
        @include medium {
          margin-left: calcColWidth($i);
        }
      }

      @include small {
        .column.is-offset-mobile-#{$i} {
          margin-left: calcColWidth($i);
        }
      }

    }
  }

  @for $i from 1 through $max-cols {
    @include large {
      .column.is-desktop-#{$i} {
        flex: none;
        width: calcColWidth($i);
      }
    }
  }

  @for $i from 1 through $max-cols {
    @if($i != $max-cols) {
      @include large {
        .column.is-offset-desktop-#{i} {
          margin-left: calcColWidth($i);
        }
      }
    }
  }

}
